CSP：
field = [
    [" ", " ", " ", " ", "Y"],
    ["R", "A", " ", " ", " "],
    [" ", " ", " ", " ", " "],
    [" ", "E", " ", " ", " "],
    [" ", " ", " ", " ", "K"]
]
Step 1:
MRV: calculate each exist letter previous and next letter exist how many position that can be assigned.
Ex. Here it will be
{'X': [[0, 3], [1, 4]], 'Q': [[0, 0], [2, 0]], 'J': [[3, 4], [4, 3]],
'B': [[0, 1], [2, 1], [1, 2]], 'D': [[2, 1], [3, 0], [4, 1], [3, 2]]}

Step2:
AC3: whether it is possible in current status.

Step3:
LCV: calculate the influence of each position. Influence is the number of that, when we assign a letter in it, how many positions will be influenced by.
Ex. Now it is
[[1, 2, 3, 2, 0],
[0, 0, 3, 4, 2],
[2, 2, 4, 4, 3],
[2, 0, 3, 4, 2],
[2, 2, 3, 2, 0]]
Like the (0,3), it will influence the (0,2) and (1,3), because it doesn’t exist (-1,3) and (0,4) has been assigned as ‘Y’

Step4:
Sorting the sequence increased by the influence.

Step5: iterate the sequence step by step, when assign a letter, add it into the record and go back to step 1




Astar:
I use 1-10 to represent apple, 11-20 to represent banana, 21-30 to represent orange.
Like this
target_status = [
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
]

step 1: generate all the possible target statuses.

Step 2: calculate which status has the minimum Manhattan distance with the start status,
	Record corresponding target and Manhattan distance.

Step 3: put the (fn, hn, gn, current_status, paths) in a heap, the heap will heapify it by fn.
The root node is the minimum fn.

Step 4: check whether it is equal to target status. Poll the node from the heap.

Step 5: iterate all the positions and generate the node for each possible status, calculate the new fn, gn, hn for each new status, and store it in the queue. If current status is not in the set, put it in and push it in the heap. Then go back to the step 4.


